package javaapplication4;

import java.awt.BorderLayout;
import java.awt.Desktop;
import java.net.URI;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartMouseEvent;
import org.jfree.chart.ChartMouseListener;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;
import java.sql.*;
import java.util.*;
import java.util.stream.Collectors;
import javax.swing.JComboBox;
import javax.swing.JPasswordField;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.TableModel;

public class AccountHomePage extends javax.swing.JFrame {
    
    JFrame bandFrame;
    
    DefaultListModel<String> wrkTskNameListModel;
    DefaultListModel<String> wrkTskRatioListModel;
    
    DefaultTableModel taskTblModel;     
    DefaultTableModel bandTblModel;     
    DefaultTableModel wrkTblModel;      
    DefaultTableModel wrkTaskTblModel;    
    DefaultTableModel subTblModel;
    DefaultTableModel wardToSubTblModel;
    DefaultTableModel deptToWorkTblModel;
    DefaultTableModel defaultBandTblModel;
    DefaultTableModel staffTblModel;
    
    Integer workModelId;
    Integer subId;
    Integer workTskId;
    Integer deptWorkModelId;
    Integer clickedTaskId;
    Integer clickedBandId;
    Integer subModIdForDefault;
    String clickedTaskName;
    Float clickedTaskRatio;
    Boolean subModComboClicked;
    
    List<String> deletedTasks;
    List<String> deletedBands;
    List<String> deletedSubTasks;
    List<Integer> subModelTaskIds;
    List<String> subModelTaskNames;
    List<Integer> defaultTaskBandsLogged;
    
    Calendar cal;
    
    public AccountHomePage() {
        initComponents();
        bandFrame= new JFrame();
        //list containing task names from workTask table
        wrkTskNameListModel = new DefaultListModel<>();
        //list containing each task name's corresponding weight entered
        wrkTskRatioListModel = new DefaultListModel<>();
        
        //table on the Primary configuration panel that will contain all newly entered tasks and weights
        taskTblModel = new DefaultTableModel();
        //table for any task bands created during Primary Pie chart configuration
        bandTblModel = new DefaultTableModel();
        
        //table containing workModel ID corresponding to the primary pie chart name
        wrkTblModel = new DefaultTableModel();
        //table containing the task and task weight corresponding to the workModel Id
        wrkTaskTblModel = new DefaultTableModel();
        //table displaying the task and task weights from the workModel and workTask tables
        subTblModel = new DefaultTableModel();
        wardToSubTblModel = new DefaultTableModel();
        deptToWorkTblModel = new DefaultTableModel();
        defaultBandTblModel = new DefaultTableModel();
        
        //Table containing staff info
        staffTblModel = new DefaultTableModel();
        
        workModelId = null;
        subId = null;
        workTskId = null;
        deptWorkModelId = null;
        clickedTaskId = null;
        clickedBandId = null;
        subModIdForDefault=null;
        clickedTaskName = "";
        clickedTaskRatio = null;
        subModComboClicked = false;
        
        //lists for storing deleted tasks or bands
        deletedTasks = new ArrayList<>();
        deletedBands = new ArrayList<>();
        deletedSubTasks = new ArrayList<>();
        defaultTaskBandsLogged = new ArrayList<>();
        subModelTaskIds = new ArrayList<>();
        subModelTaskNames = new ArrayList<>();
        
        cal = Calendar.getInstance();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        topStripPanel = new javax.swing.JPanel();
        myAccountLabel = new javax.swing.JLabel();
        logOutButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        accountHomePanel = new javax.swing.JPanel();
        configButton = new javax.swing.JButton();
        analyseButton = new javax.swing.JButton();
        patientButton = new javax.swing.JButton();
        staffButton = new javax.swing.JButton();
        analysisPanel = new javax.swing.JPanel();
        backFromAnalysis = new javax.swing.JLabel();
        patientPanel = new javax.swing.JPanel();
        backFromPatient = new javax.swing.JLabel();
        staffPinPanel = new javax.swing.JPanel();
        backFromStaff = new javax.swing.JLabel();
        staffListLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        staffTable = new javax.swing.JTable();
        editAPasswordButton = new javax.swing.JButton();
        configurationPanel = new javax.swing.JPanel();
        selectPiePanel = new javax.swing.JPanel();
        selectPieLabel = new javax.swing.JLabel();
        workModelPieSelection = new javax.swing.JRadioButton();
        subModelPieSelection = new javax.swing.JRadioButton();
        configDeptWardSelection = new javax.swing.JRadioButton();
        configDisplayPanel = new javax.swing.JPanel();
        emptyPanel = new javax.swing.JPanel();
        workModelConfigPanel = new javax.swing.JPanel();
        workModNameLabel = new javax.swing.JLabel();
        pieChartNameTF = new javax.swing.JTextField();
        enterPieChartNameButton = new javax.swing.JButton();
        taskTblWorkModNameLbl = new javax.swing.JLabel();
        taskTblWorkModLblValue = new javax.swing.JLabel();
        taskNameLabel = new javax.swing.JLabel();
        taskNameTF = new javax.swing.JTextField();
        taskRatioLabel = new javax.swing.JLabel();
        taskWeightTF = new javax.swing.JTextField();
        addTaskButton = new javax.swing.JButton();
        saveTaskChangesButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        taskTable = new javax.swing.JTable();
        viewPieChartButton = new javax.swing.JButton();
        deleteTaskButton = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        workModelDescLabel = new javax.swing.JLabel();
        taskTblWorkModDescLbl = new javax.swing.JLabel();
        taskTblWorkModDescLblValue = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        workModelDescTF = new javax.swing.JTextArea();
        jScrollPane12 = new javax.swing.JScrollPane();
        taskDescriptionTF = new javax.swing.JTextArea();
        subModelConfigPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        subModelComboBox = new javax.swing.JComboBox<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        subModeljTable = new javax.swing.JTable();
        subModelNameLabel = new javax.swing.JLabel();
        subModNameTF = new javax.swing.JTextField();
        jScrollPane6 = new javax.swing.JScrollPane();
        subPrimTaskDisplayTable = new javax.swing.JTable();
        enterSubModNameButton = new javax.swing.JButton();
        viewSubModel = new javax.swing.JButton();
        subSaveChanges = new javax.swing.JButton();
        subModelDescLabel = new javax.swing.JLabel();
        jScrollPane13 = new javax.swing.JScrollPane();
        subModDescTF = new javax.swing.JTextArea();
        bandCreationPanel = new javax.swing.JPanel();
        taskNameIDLabel = new javax.swing.JLabel();
        taskNameBand = new javax.swing.JLabel();
        bandNameLabel = new javax.swing.JLabel();
        bandNameTF = new javax.swing.JTextField();
        bandWeightLabel = new javax.swing.JLabel();
        bandWeightTF = new javax.swing.JTextField();
        addBandButton = new javax.swing.JButton();
        saveChangesButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        bandTable = new javax.swing.JTable();
        bandDeleteButton = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        bandDescLabel = new javax.swing.JLabel();
        jScrollPane14 = new javax.swing.JScrollPane();
        bandDescTF = new javax.swing.JTextArea();
        deptWardAssignmentPanel = new javax.swing.JPanel();
        deptSelectionJP = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        deptComboBox = new javax.swing.JComboBox<>();
        workSubModDisplayJP = new javax.swing.JPanel();
        deptWorkModJP = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        deptWorkModelTable = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        wardSubModJP = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        subModelTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        bandIdDefaultTable = new javax.swing.JTable();
        saveDefaultChangesJB = new javax.swing.JButton();
        wardComboJP = new javax.swing.JPanel();
        fullWardComboJP = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        configWardComboBox = new javax.swing.JComboBox<>();
        emptyWardComboJP = new javax.swing.JPanel();
        infoDisplayJP = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        deptTF = new javax.swing.JLabel();
        workModelTF = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        wardTF = new javax.swing.JLabel();
        subModelTF = new javax.swing.JLabel();
        bandJP = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        taskBandTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1500, 800));

        topStripPanel.setBackground(new java.awt.Color(45, 118, 232));

        myAccountLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        myAccountLabel.setForeground(new java.awt.Color(255, 255, 255));
        myAccountLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaapplication4/images/icons8_male_user_32px.png"))); // NOI18N
        myAccountLabel.setText("My Account");
        myAccountLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                myAccountLabelMouseClicked(evt);
            }
        });

        logOutButton.setText("Log Out");
        logOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout topStripPanelLayout = new javax.swing.GroupLayout(topStripPanel);
        topStripPanel.setLayout(topStripPanelLayout);
        topStripPanelLayout.setHorizontalGroup(
            topStripPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topStripPanelLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(myAccountLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logOutButton)
                .addGap(29, 29, 29))
        );
        topStripPanelLayout.setVerticalGroup(
            topStripPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topStripPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(topStripPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(myAccountLabel)
                    .addComponent(logOutButton))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jPanel1.setLayout(new java.awt.CardLayout());

        configButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaapplication4/images/icons8_pie_chart_32px_2.png"))); // NOI18N
        configButton.setText("Configure");
        configButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configButtonActionPerformed(evt);
            }
        });

        analyseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaapplication4/images/icons8_graph_32px_4.png"))); // NOI18N
        analyseButton.setText("Analyse Data");
        analyseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyseButtonActionPerformed(evt);
            }
        });

        patientButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaapplication4/images/icons8_staff_32px_2.png"))); // NOI18N
        patientButton.setText("Patients");
        patientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientButtonActionPerformed(evt);
            }
        });

        staffButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaapplication4/images/icons8_page_32px_1.png"))); // NOI18N
        staffButton.setText("Staff");
        staffButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staffButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout accountHomePanelLayout = new javax.swing.GroupLayout(accountHomePanel);
        accountHomePanel.setLayout(accountHomePanelLayout);
        accountHomePanelLayout.setHorizontalGroup(
            accountHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accountHomePanelLayout.createSequentialGroup()
                .addContainerGap(247, Short.MAX_VALUE)
                .addGroup(accountHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(configButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(analyseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 447, Short.MAX_VALUE)
                .addGroup(accountHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(patientButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(staffButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(247, Short.MAX_VALUE))
        );
        accountHomePanelLayout.setVerticalGroup(
            accountHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accountHomePanelLayout.createSequentialGroup()
                .addContainerGap(138, Short.MAX_VALUE)
                .addGroup(accountHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(patientButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(configButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 138, Short.MAX_VALUE)
                .addGroup(accountHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(analyseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(staffButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(109, Short.MAX_VALUE))
        );

        jPanel1.add(accountHomePanel, "card2");

        backFromAnalysis.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaapplication4/images/icons8_left_32px_2.png"))); // NOI18N
        backFromAnalysis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backFromAnalysisMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout analysisPanelLayout = new javax.swing.GroupLayout(analysisPanel);
        analysisPanel.setLayout(analysisPanelLayout);
        analysisPanelLayout.setHorizontalGroup(
            analysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(analysisPanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(backFromAnalysis, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1144, Short.MAX_VALUE))
        );
        analysisPanelLayout.setVerticalGroup(
            analysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(analysisPanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(backFromAnalysis, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(514, Short.MAX_VALUE))
        );

        jPanel1.add(analysisPanel, "card3");

        backFromPatient.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaapplication4/images/icons8_left_32px_2.png"))); // NOI18N
        backFromPatient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backFromPatientMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout patientPanelLayout = new javax.swing.GroupLayout(patientPanel);
        patientPanel.setLayout(patientPanelLayout);
        patientPanelLayout.setHorizontalGroup(
            patientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientPanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(backFromPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1164, Short.MAX_VALUE))
        );
        patientPanelLayout.setVerticalGroup(
            patientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientPanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(backFromPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(514, Short.MAX_VALUE))
        );

        jPanel1.add(patientPanel, "card4");

        backFromStaff.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaapplication4/images/icons8_left_32px_2.png"))); // NOI18N
        backFromStaff.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backFromStaffMouseClicked(evt);
            }
        });

        staffListLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        staffListLabel.setText("Staff List");

        staffTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Staff Name", "Occupation Type", "Permissions Level", "Username", "Password"
            }
        ));
        jScrollPane2.setViewportView(staffTable);

        editAPasswordButton.setText("Edit a Password");
        editAPasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editAPasswordButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout staffPinPanelLayout = new javax.swing.GroupLayout(staffPinPanel);
        staffPinPanel.setLayout(staffPinPanelLayout);
        staffPinPanelLayout.setHorizontalGroup(
            staffPinPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(staffPinPanelLayout.createSequentialGroup()
                .addGroup(staffPinPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(staffPinPanelLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(backFromStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(staffPinPanelLayout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addGroup(staffPinPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(staffPinPanelLayout.createSequentialGroup()
                                .addComponent(staffListLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(editAPasswordButton))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(242, Short.MAX_VALUE))
        );
        staffPinPanelLayout.setVerticalGroup(
            staffPinPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(staffPinPanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(backFromStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addGroup(staffPinPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(staffListLabel)
                    .addComponent(editAPasswordButton))
                .addGap(35, 35, 35)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(staffPinPanel, "card5");

        selectPieLabel.setText("Select a configuration task:");

        buttonGroup1.add(workModelPieSelection);
        workModelPieSelection.setText("Configure Work Model");
        workModelPieSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                workModelPieSelectionActionPerformed(evt);
            }
        });

        buttonGroup1.add(subModelPieSelection);
        subModelPieSelection.setText("Configure Sub Model");
        subModelPieSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subModelPieSelectionActionPerformed(evt);
            }
        });

        buttonGroup1.add(configDeptWardSelection);
        configDeptWardSelection.setText("Assign models to Departments and Wards");
        configDeptWardSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configDeptWardSelectionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout selectPiePanelLayout = new javax.swing.GroupLayout(selectPiePanel);
        selectPiePanel.setLayout(selectPiePanelLayout);
        selectPiePanelLayout.setHorizontalGroup(
            selectPiePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectPiePanelLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(selectPieLabel)
                .addGap(18, 18, 18)
                .addGroup(selectPiePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(subModelPieSelection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(workModelPieSelection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(configDeptWardSelection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        selectPiePanelLayout.setVerticalGroup(
            selectPiePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectPiePanelLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(selectPiePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectPieLabel)
                    .addComponent(workModelPieSelection))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(subModelPieSelection)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(configDeptWardSelection)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        configDisplayPanel.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout emptyPanelLayout = new javax.swing.GroupLayout(emptyPanel);
        emptyPanel.setLayout(emptyPanelLayout);
        emptyPanelLayout.setHorizontalGroup(
            emptyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1221, Short.MAX_VALUE)
        );
        emptyPanelLayout.setVerticalGroup(
            emptyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 433, Short.MAX_VALUE)
        );

        configDisplayPanel.add(emptyPanel, "card4");

        workModNameLabel.setText("Work Model Name: ");

        pieChartNameTF.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N

        enterPieChartNameButton.setText("Add Work Model");
        enterPieChartNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterPieChartNameButtonActionPerformed(evt);
            }
        });

        taskTblWorkModNameLbl.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        taskTblWorkModNameLbl.setText("Table for Work Model:");

        taskNameLabel.setText("Task Name:");

        taskNameTF.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N

        taskRatioLabel.setText("Task Ratio:");

        taskWeightTF.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N

        addTaskButton.setText("Add Task");
        addTaskButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTaskButtonActionPerformed(evt);
            }
        });

        saveTaskChangesButton.setText("Save Changes");
        saveTaskChangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTaskChangesButtonActionPerformed(evt);
            }
        });

        taskTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Task", "Ratio", "Description"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        taskTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                taskTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(taskTable);
        if (taskTable.getColumnModel().getColumnCount() > 0) {
            taskTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            taskTable.getColumnModel().getColumn(1).setPreferredWidth(5);
            taskTable.getColumnModel().getColumn(2).setPreferredWidth(200);
        }

        viewPieChartButton.setText("Preview Work Model");
        viewPieChartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPieChartButtonActionPerformed(evt);
            }
        });

        deleteTaskButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaapplication4/images/icons8_trash_can_25px.png"))); // NOI18N
        deleteTaskButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteTaskButtonMouseClicked(evt);
            }
        });

        jLabel1.setText("Task Description:");

        workModelDescLabel.setText("Work Model Description:");

        taskTblWorkModDescLbl.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        taskTblWorkModDescLbl.setText("Work Model Description:");

        workModelDescTF.setColumns(20);
        workModelDescTF.setLineWrap(true);
        workModelDescTF.setRows(5);
        jScrollPane9.setViewportView(workModelDescTF);

        taskDescriptionTF.setColumns(20);
        taskDescriptionTF.setLineWrap(true);
        taskDescriptionTF.setRows(5);
        jScrollPane12.setViewportView(taskDescriptionTF);

        javax.swing.GroupLayout workModelConfigPanelLayout = new javax.swing.GroupLayout(workModelConfigPanel);
        workModelConfigPanel.setLayout(workModelConfigPanelLayout);
        workModelConfigPanelLayout.setHorizontalGroup(
            workModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(workModelConfigPanelLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(workModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(workModelConfigPanelLayout.createSequentialGroup()
                        .addComponent(workModNameLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(workModelConfigPanelLayout.createSequentialGroup()
                        .addGroup(workModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(taskRatioLabel)
                            .addComponent(workModelDescLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(taskNameLabel)
                            .addComponent(jScrollPane9)
                            .addComponent(jScrollPane12)
                            .addComponent(pieChartNameTF)
                            .addComponent(taskWeightTF)
                            .addComponent(taskNameTF))
                        .addGroup(workModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(workModelConfigPanelLayout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(workModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(enterPieChartNameButton, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                                    .addComponent(addTaskButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 257, Short.MAX_VALUE)
                                .addGroup(workModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(workModelConfigPanelLayout.createSequentialGroup()
                                        .addGroup(workModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(taskTblWorkModDescLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(taskTblWorkModNameLbl))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(workModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(taskTblWorkModLblValue, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(taskTblWorkModDescLblValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(workModelConfigPanelLayout.createSequentialGroup()
                                        .addComponent(saveTaskChangesButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(viewPieChartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(workModelConfigPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(deleteTaskButton)))))
                .addGap(88, 88, 88))
        );
        workModelConfigPanelLayout.setVerticalGroup(
            workModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(workModelConfigPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(workModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(workModNameLabel)
                    .addComponent(taskTblWorkModNameLbl)
                    .addComponent(taskTblWorkModLblValue, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(workModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(workModelConfigPanelLayout.createSequentialGroup()
                        .addComponent(pieChartNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(workModelDescLabel))
                    .addGroup(workModelConfigPanelLayout.createSequentialGroup()
                        .addGroup(workModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(taskTblWorkModDescLblValue, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(taskTblWorkModDescLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteTaskButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(workModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(workModelConfigPanelLayout.createSequentialGroup()
                        .addGroup(workModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, workModelConfigPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(enterPieChartNameButton)
                                .addGap(192, 192, 192)))
                        .addGap(18, 18, 18)
                        .addGroup(workModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(saveTaskChangesButton)
                            .addComponent(viewPieChartButton))
                        .addGap(37, 37, 37))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, workModelConfigPanelLayout.createSequentialGroup()
                        .addGroup(workModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(workModelConfigPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(addTaskButton))
                            .addGroup(workModelConfigPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                                .addComponent(taskNameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(taskNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(taskRatioLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(taskWeightTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(52, 52, 52))))
        );

        configDisplayPanel.add(workModelConfigPanel, "card2");

        jLabel7.setText("Work Model Chart:");

        subModelComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                subModelComboBoxItemStateChanged(evt);
            }
        });
        subModelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subModelComboBoxActionPerformed(evt);
            }
        });

        subModeljTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Task", "Ratio", "Description"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(subModeljTable);
        if (subModeljTable.getColumnModel().getColumnCount() > 0) {
            subModeljTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            subModeljTable.getColumnModel().getColumn(1).setPreferredWidth(5);
            subModeljTable.getColumnModel().getColumn(2).setPreferredWidth(200);
        }

        subModelNameLabel.setText("Sub Model Name:");

        subPrimTaskDisplayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Task", "Ratio", "Description"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        subPrimTaskDisplayTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                subPrimTaskDisplayTableMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(subPrimTaskDisplayTable);
        if (subPrimTaskDisplayTable.getColumnModel().getColumnCount() > 0) {
            subPrimTaskDisplayTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            subPrimTaskDisplayTable.getColumnModel().getColumn(1).setPreferredWidth(5);
            subPrimTaskDisplayTable.getColumnModel().getColumn(2).setPreferredWidth(200);
        }

        enterSubModNameButton.setText("Add Sub Model");
        enterSubModNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterSubModNameButtonActionPerformed(evt);
            }
        });

        viewSubModel.setText("Preview SubModel");
        viewSubModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewSubModelActionPerformed(evt);
            }
        });

        subSaveChanges.setText("Save Changes");
        subSaveChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subSaveChangesActionPerformed(evt);
            }
        });

        subModelDescLabel.setText("Sub Model Description:");

        subModDescTF.setColumns(20);
        subModDescTF.setLineWrap(true);
        subModDescTF.setRows(5);
        jScrollPane13.setViewportView(subModDescTF);

        javax.swing.GroupLayout subModelConfigPanelLayout = new javax.swing.GroupLayout(subModelConfigPanel);
        subModelConfigPanel.setLayout(subModelConfigPanelLayout);
        subModelConfigPanelLayout.setHorizontalGroup(
            subModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subModelConfigPanelLayout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(subModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, subModelConfigPanelLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(subModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(subModNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(176, 176, 176))
                    .addGroup(subModelConfigPanelLayout.createSequentialGroup()
                        .addGroup(subModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(subModelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(subModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(subModelConfigPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 482, Short.MAX_VALUE)
                                .addComponent(enterSubModNameButton, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, subModelConfigPanelLayout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addGroup(subModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(subModelConfigPanelLayout.createSequentialGroup()
                                        .addComponent(viewSubModel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(subSaveChanges))
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 556, Short.MAX_VALUE)
                                    .addGroup(subModelConfigPanelLayout.createSequentialGroup()
                                        .addGroup(subModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(subModelNameLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(subModelDescLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 395, Short.MAX_VALUE)))))
                        .addGap(26, 26, 26))))
        );
        subModelConfigPanelLayout.setVerticalGroup(
            subModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subModelConfigPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(subModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(subModelNameLabel)
                    .addComponent(subModNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(subModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(subModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(subModelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(subModelDescLabel))
                    .addGroup(subModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(enterSubModNameButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(subModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(subModelConfigPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(subModelConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(subSaveChanges)
                            .addComponent(viewSubModel))
                        .addGap(0, 7, Short.MAX_VALUE)))
                .addGap(44, 44, 44))
        );

        configDisplayPanel.add(subModelConfigPanel, "card3");

        taskNameIDLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        taskNameIDLabel.setText("Task:");

        bandNameLabel.setText("Band Name:");

        bandNameTF.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N

        bandWeightLabel.setText("Band Weight:");

        bandWeightTF.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N

        addBandButton.setText("Add");
        addBandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBandButtonActionPerformed(evt);
            }
        });

        saveChangesButton.setText("Save Changes");
        saveChangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveChangesButtonActionPerformed(evt);
            }
        });

        bandTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Band Name", "Weight", "Band Description"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(bandTable);
        if (bandTable.getColumnModel().getColumnCount() > 0) {
            bandTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            bandTable.getColumnModel().getColumn(1).setPreferredWidth(5);
            bandTable.getColumnModel().getColumn(2).setPreferredWidth(200);
        }

        bandDeleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaapplication4/images/icons8_trash_can_25px.png"))); // NOI18N
        bandDeleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bandDeleteButtonMouseClicked(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaapplication4/images/icons8_left_32px_2.png"))); // NOI18N
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        bandDescLabel.setText("Band Description:");

        bandDescTF.setColumns(20);
        bandDescTF.setLineWrap(true);
        bandDescTF.setRows(5);
        jScrollPane14.setViewportView(bandDescTF);

        javax.swing.GroupLayout bandCreationPanelLayout = new javax.swing.GroupLayout(bandCreationPanel);
        bandCreationPanel.setLayout(bandCreationPanelLayout);
        bandCreationPanelLayout.setHorizontalGroup(
            bandCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bandCreationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(77, 77, 77)
                .addGroup(bandCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bandCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(addBandButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bandNameLabel)
                        .addGroup(bandCreationPanelLayout.createSequentialGroup()
                            .addComponent(taskNameIDLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(taskNameBand, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE))
                        .addComponent(bandWeightTF)
                        .addComponent(bandDescLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bandNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bandWeightLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 236, Short.MAX_VALUE)
                .addGroup(bandCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saveChangesButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(bandDeleteButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(170, 170, 170))
        );
        bandCreationPanelLayout.setVerticalGroup(
            bandCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bandCreationPanelLayout.createSequentialGroup()
                .addGroup(bandCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bandCreationPanelLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(bandCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(taskNameIDLabel)
                            .addComponent(taskNameBand, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(bandCreationPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)))
                .addGap(22, 22, 22)
                .addGroup(bandCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(bandNameLabel)
                    .addComponent(bandDeleteButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bandCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(bandCreationPanelLayout.createSequentialGroup()
                        .addComponent(bandNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bandWeightLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bandWeightTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bandDescLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53))
                    .addGroup(bandCreationPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(45, 45, 45)))
                .addGroup(bandCreationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveChangesButton)
                    .addComponent(addBandButton))
                .addContainerGap(57, Short.MAX_VALUE))
        );

        configDisplayPanel.add(bandCreationPanel, "card5");

        jLabel5.setText("Department: ");

        deptComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                deptComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout deptSelectionJPLayout = new javax.swing.GroupLayout(deptSelectionJP);
        deptSelectionJP.setLayout(deptSelectionJPLayout);
        deptSelectionJPLayout.setHorizontalGroup(
            deptSelectionJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deptSelectionJPLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(deptSelectionJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                    .addComponent(deptComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        deptSelectionJPLayout.setVerticalGroup(
            deptSelectionJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deptSelectionJPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deptComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        workSubModDisplayJP.setLayout(new java.awt.CardLayout());

        deptWorkModelTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Work Model Name", "Work Model ID", "Work Model Description"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        deptWorkModelTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deptWorkModelTableMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(deptWorkModelTable);
        if (deptWorkModelTable.getColumnModel().getColumnCount() > 0) {
            deptWorkModelTable.getColumnModel().getColumn(0).setPreferredWidth(200);
            deptWorkModelTable.getColumnModel().getColumn(1).setMinWidth(0);
            deptWorkModelTable.getColumnModel().getColumn(1).setMaxWidth(0);
            deptWorkModelTable.getColumnModel().getColumn(2).setPreferredWidth(400);
        }

        jLabel9.setText("Please select the Work Model to associate with the department ");

        javax.swing.GroupLayout deptWorkModJPLayout = new javax.swing.GroupLayout(deptWorkModJP);
        deptWorkModJP.setLayout(deptWorkModJPLayout);
        deptWorkModJPLayout.setHorizontalGroup(
            deptWorkModJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deptWorkModJPLayout.createSequentialGroup()
                .addGroup(deptWorkModJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(deptWorkModJPLayout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(deptWorkModJPLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 679, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        deptWorkModJPLayout.setVerticalGroup(
            deptWorkModJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deptWorkModJPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addGap(27, 27, 27)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(97, Short.MAX_VALUE))
        );

        workSubModDisplayJP.add(deptWorkModJP, "card3");

        subModelTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sub Model Name", "Sub Model Description", "Sub Model Id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        subModelTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                subModelTableMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(subModelTable);
        if (subModelTable.getColumnModel().getColumnCount() > 0) {
            subModelTable.getColumnModel().getColumn(0).setPreferredWidth(200);
            subModelTable.getColumnModel().getColumn(1).setPreferredWidth(400);
            subModelTable.getColumnModel().getColumn(2).setMinWidth(0);
            subModelTable.getColumnModel().getColumn(2).setMaxWidth(0);
        }

        jLabel4.setText("Select Sub Model for Ward and choose default tasks and bands");

        bandIdDefaultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Band ID", "Task ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane10.setViewportView(bandIdDefaultTable);
        if (bandIdDefaultTable.getColumnModel().getColumnCount() > 0) {
            bandIdDefaultTable.getColumnModel().getColumn(0).setMinWidth(0);
            bandIdDefaultTable.getColumnModel().getColumn(0).setMaxWidth(0);
            bandIdDefaultTable.getColumnModel().getColumn(1).setMinWidth(0);
            bandIdDefaultTable.getColumnModel().getColumn(1).setMaxWidth(0);
        }

        saveDefaultChangesJB.setText("Save Changes");
        saveDefaultChangesJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDefaultChangesJBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout wardSubModJPLayout = new javax.swing.GroupLayout(wardSubModJP);
        wardSubModJP.setLayout(wardSubModJPLayout);
        wardSubModJPLayout.setHorizontalGroup(
            wardSubModJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wardSubModJPLayout.createSequentialGroup()
                .addGroup(wardSubModJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(saveDefaultChangesJB)
                    .addGroup(wardSubModJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(wardSubModJPLayout.createSequentialGroup()
                            .addGap(100, 100, 100)
                            .addComponent(jLabel4))
                        .addGroup(wardSubModJPLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 678, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        wardSubModJPLayout.setVerticalGroup(
            wardSubModJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wardSubModJPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(27, 27, 27)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(saveDefaultChangesJB)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        workSubModDisplayJP.add(wardSubModJP, "card4");

        wardComboJP.setPreferredSize(new java.awt.Dimension(514, 206));
        wardComboJP.setLayout(new java.awt.CardLayout());

        jLabel3.setText("Select Ward: ");

        configWardComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                configWardComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout fullWardComboJPLayout = new javax.swing.GroupLayout(fullWardComboJP);
        fullWardComboJP.setLayout(fullWardComboJPLayout);
        fullWardComboJPLayout.setHorizontalGroup(
            fullWardComboJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fullWardComboJPLayout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(fullWardComboJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fullWardComboJPLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                        .addGap(329, 329, 329))
                    .addGroup(fullWardComboJPLayout.createSequentialGroup()
                        .addComponent(configWardComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        fullWardComboJPLayout.setVerticalGroup(
            fullWardComboJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fullWardComboJPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(configWardComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(153, Short.MAX_VALUE))
        );

        wardComboJP.add(fullWardComboJP, "card3");

        javax.swing.GroupLayout emptyWardComboJPLayout = new javax.swing.GroupLayout(emptyWardComboJP);
        emptyWardComboJP.setLayout(emptyWardComboJPLayout);
        emptyWardComboJPLayout.setHorizontalGroup(
            emptyWardComboJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 506, Short.MAX_VALUE)
        );
        emptyWardComboJPLayout.setVerticalGroup(
            emptyWardComboJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 206, Short.MAX_VALUE)
        );

        wardComboJP.add(emptyWardComboJP, "card3");

        jLabel6.setText("Department: ");

        jLabel8.setText("Work Model: ");

        jLabel11.setText("Ward: ");

        jLabel12.setText("Sub Model: ");

        javax.swing.GroupLayout infoDisplayJPLayout = new javax.swing.GroupLayout(infoDisplayJP);
        infoDisplayJP.setLayout(infoDisplayJPLayout);
        infoDisplayJPLayout.setHorizontalGroup(
            infoDisplayJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoDisplayJPLayout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(infoDisplayJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoDisplayJPLayout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(deptTF, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(wardTF, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(infoDisplayJPLayout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(workModelTF, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jLabel12)
                        .addGap(6, 6, 6)
                        .addComponent(subModelTF, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        infoDisplayJPLayout.setVerticalGroup(
            infoDisplayJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoDisplayJPLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(infoDisplayJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(deptTF, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(wardTF, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(infoDisplayJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(workModelTF, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(subModelTF, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        bandJP.setMinimumSize(new java.awt.Dimension(250, 250));
        bandJP.setPreferredSize(new java.awt.Dimension(250, 250));
        bandJP.setLayout(new java.awt.BorderLayout());

        taskBandTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Band Name", "Band ID", "Task Id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        taskBandTable.setRowHeight(40);
        taskBandTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                taskBandTableMouseClicked(evt);
            }
        });
        jScrollPane11.setViewportView(taskBandTable);
        if (taskBandTable.getColumnModel().getColumnCount() > 0) {
            taskBandTable.getColumnModel().getColumn(1).setMinWidth(0);
            taskBandTable.getColumnModel().getColumn(1).setMaxWidth(0);
            taskBandTable.getColumnModel().getColumn(2).setMinWidth(0);
            taskBandTable.getColumnModel().getColumn(2).setMaxWidth(0);
        }

        bandJP.add(jScrollPane11, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout deptWardAssignmentPanelLayout = new javax.swing.GroupLayout(deptWardAssignmentPanel);
        deptWardAssignmentPanel.setLayout(deptWardAssignmentPanelLayout);
        deptWardAssignmentPanelLayout.setHorizontalGroup(
            deptWardAssignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deptWardAssignmentPanelLayout.createSequentialGroup()
                .addGroup(deptWardAssignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deptSelectionJP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(wardComboJP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(infoDisplayJP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(workSubModDisplayJP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(deptWardAssignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(deptWardAssignmentPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(bandJP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        deptWardAssignmentPanelLayout.setVerticalGroup(
            deptWardAssignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(workSubModDisplayJP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(deptWardAssignmentPanelLayout.createSequentialGroup()
                .addComponent(deptSelectionJP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wardComboJP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(infoDisplayJP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(deptWardAssignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(deptWardAssignmentPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(bandJP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        configDisplayPanel.add(deptWardAssignmentPanel, "card6");

        javax.swing.GroupLayout configurationPanelLayout = new javax.swing.GroupLayout(configurationPanel);
        configurationPanel.setLayout(configurationPanelLayout);
        configurationPanelLayout.setHorizontalGroup(
            configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(selectPiePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(configDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        configurationPanelLayout.setVerticalGroup(
            configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configurationPanelLayout.createSequentialGroup()
                .addComponent(selectPiePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(configDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE))
        );

        jPanel1.add(configurationPanel, "card6");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(topStripPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(topStripPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 585, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void configButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configButtonActionPerformed
        //GO TO CONFIGURE PAGE
        patientPanel.setVisible(false);
        staffPinPanel.setVisible(false);
        accountHomePanel.setVisible(false);
        analysisPanel.setVisible(false);
        configurationPanel.setVisible(true);
        
        myAccountLabel.setText("My Account - Configuration");
    }//GEN-LAST:event_configButtonActionPerformed

    private void patientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientButtonActionPerformed
        // GO TO PATIENT PAGE
//        patientPanel.setVisible(true);
        new NurseWorkLoggingAcc().setVisible(true);
        staffPinPanel.setVisible(false);
        accountHomePanel.setVisible(false);
        analysisPanel.setVisible(false);
        configurationPanel.setVisible(false);
        
//        myAccountLabel.setText("My Account - Patients");
        
    }//GEN-LAST:event_patientButtonActionPerformed

    private void analyseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyseButtonActionPerformed
        // GO TO ANALYSE PAGE 
        patientPanel.setVisible(false);
        staffPinPanel.setVisible(false);
        accountHomePanel.setVisible(false);
//        analysisPanel.setVisible(true);
        configurationPanel.setVisible(false);
        
        myAccountLabel.setText("My Account - Analyse Data");
        Desktop desktop = Desktop.getDesktop();
        try{
            if(desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
                desktop.getDesktop().browse(new URI("https://powerbi.microsoft.co/en/"));
                URI oURL = new URI("https://app.powerbi.com/links/twqWUzh5eI?ctid=63ff6df4-9ea2-4e23-b6a9-b4c24dce2bbc&pbi_source=linkShare");
                desktop.browse(oURL);
            }
        }        
        catch(Exception e) {
            System.out.println("EXCEPTION:::::::::::::: " + e.getMessage());
        }
        
    }//GEN-LAST:event_analyseButtonActionPerformed

    private void addStaffInfoToStaffTable(){
        ResultSet rs = DatabaseHelperSP.getStaffList(HomePage.conn);
        System.out.println("refreshing staffJTabl !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
        String permissionsLevel = "";
        try {
            while (rs.next()) {
                String name = rs.getString("FirstName") + " " + rs.getString ("LastName");
                Integer occupationTypeID = rs.getInt("StaffType_ID");
                String occupationTypeName = DatabaseHelperSP.getStaffTypeName(HomePage.conn, occupationTypeID);
                if( Arrays.asList(HomePage.adminStaffTypes).contains(occupationTypeID) )
                {
                    permissionsLevel = "Administrator User Permissions";
                }
                else if ( Arrays.asList(HomePage.nurseStaffTypes).contains(occupationTypeID) )
                {
                    permissionsLevel = "Regular User Permissions";
                }
                String username = rs.getString("Unique_ID");
                Integer passwordLength = rs.getString("Password").length();
                String pwDisplayed = "*".repeat(passwordLength);
                String data [] = {name, occupationTypeName, permissionsLevel, username, pwDisplayed};
                
                
                if (!"System".equals(username))
                {
                    staffTblModel = (DefaultTableModel)staffTable.getModel();
                    staffTblModel.addRow(data);
                }
                
                
            }
            System.out.println("staffJTable refreshed !!!!!!!!!!!!!!!!!!!!");
        }
        catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    private void staffButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staffButtonActionPerformed
        // GO TO STAFF PAGE 
        patientPanel.setVisible(false);
        staffPinPanel.setVisible(true);
        accountHomePanel.setVisible(false);
        analysisPanel.setVisible(false);
        configurationPanel.setVisible(false);
        
        myAccountLabel.setText("My Account - Staff PIN");
        
        addStaffInfoToStaffTable();
    }//GEN-LAST:event_staffButtonActionPerformed

    private void backFromAnalysisMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backFromAnalysisMouseClicked
        // GO BACK TO HOME FROM ANALYZE
        patientPanel.setVisible(false);
        staffPinPanel.setVisible(false);
        accountHomePanel.setVisible(true);
        analysisPanel.setVisible(false);
        configurationPanel.setVisible(false);     
        
        myAccountLabel.setText("My Account");
    }//GEN-LAST:event_backFromAnalysisMouseClicked

    private void backFromPatientMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backFromPatientMouseClicked
        // GO BACK TO HOME FROM PATIENT
        patientPanel.setVisible(false);
        staffPinPanel.setVisible(false);
        accountHomePanel.setVisible(true);
        analysisPanel.setVisible(false);
        configurationPanel.setVisible(false);     
        
        myAccountLabel.setText("My Account");
    }//GEN-LAST:event_backFromPatientMouseClicked

    private void backFromStaffMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backFromStaffMouseClicked
        // GO BACK TO HOME FROM STAFF 
        patientPanel.setVisible(false);
        staffPinPanel.setVisible(false);
        accountHomePanel.setVisible(true);
        analysisPanel.setVisible(false);
        configurationPanel.setVisible(false);     

        myAccountLabel.setText("My Account");
    }//GEN-LAST:event_backFromStaffMouseClicked
    
    private void workModelPieSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_workModelPieSelectionActionPerformed
        // OPEN PRI PIE CONFIG 
        workModelConfigPanel.setVisible(true);
        subModelConfigPanel.setVisible(false);
        emptyPanel.setVisible(false);
        bandCreationPanel.setVisible(false);
        deptWardAssignmentPanel.setVisible(false);      
        
        //the following lines of code ensure that all tables and text fields are empty
        taskTblModel.setRowCount(0);
        pieChartNameTF.setText("");
        taskTblWorkModLblValue.setText("");
    }//GEN-LAST:event_workModelPieSelectionActionPerformed

    
    protected void addWorkModelsToComboBox(ResultSet rs) {
        try {
            //iterate through the table and for every WorkModelName that exists, add it to the comboBox
            while (rs.next()) {
                String name = rs.getString("WorkModelName");
                subModelComboBox.addItem(name);
            }
            //? what hapens if none found??
        } 
        catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        if (subModelComboBox.getItemCount() < 1) {    
            JOptionPane.showMessageDialog(subModelConfigPanel, "You cannot configure a sub model Pie Chart until you have configured a Primary!!"); 
        }
    }
    
    private void subModelPieSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subModelPieSelectionActionPerformed
        // OPEN WARD PIE CONFIG 
        workModelConfigPanel.setVisible(false);
        subModelConfigPanel.setVisible(true);
        emptyPanel.setVisible(false);
        bandCreationPanel.setVisible(false);
        deptWardAssignmentPanel.setVisible(false);

        
        //remove all items from ward combobox to ensure items do not duplicate. Also make sure text fields are empty
        wrkTaskTblModel.setRowCount(0);
        subTblModel.setRowCount(0);
        subModNameTF.setText("");
        subModelComboBox.removeAllItems();
        subModelComboBox.addItem("Choose Primary sub model");
        
        //we need to populate the comboBox with any existing Primary WorkModelNames from the database
        //if the comboBox stays empty, no Primary work models have been created yet and we return the approp message to the user
        //returnWorkModelNames returns a resultset as we wish to find all which exist in the WorkModel table
        ResultSet rs = DatabaseHelperSP.returnWorkModelNames(HomePage.conn);
        addWorkModelsToComboBox(rs);
    }//GEN-LAST:event_subModelPieSelectionActionPerformed

    protected boolean doesTaskExist() {
        boolean taskExists = false;
        //find out whether the task name entered already exists       
        for (int i = 0; i < taskTblModel.getRowCount(); i++) {
            String taskName = (String)taskTblModel.getValueAt(i, 0);
            if (taskName.equalsIgnoreCase(taskNameTF.getText())) {
                taskExists = true;                
            }
        }
        return taskExists;
    }
    
    private void clearTaskNameTFTaskWeightTF() {
        taskNameTF.setText("");
        taskWeightTF.setText("");
        taskDescriptionTF.setText("");
    }
    
    private void addTaskButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTaskButtonActionPerformed
        boolean taskExists = doesTaskExist();   //find out whether the task name entered already exists in this primary model
        taskTblModel = (DefaultTableModel)taskTable.getModel();
        
        // instead of typing in each task 1 by 1, have upload .csv file instead. will use SQL bulk INSERT
        
        if (taskTblWorkModLblValue.getText().equals("") || taskNameTF.getText().equals("") || taskWeightTF.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Fields cannot be blank. Please enter all data!");
        }
        else if (taskExists) {
            JOptionPane.showMessageDialog(this, "This task name already exists and cannot be added into the table!");
        }
        else {
            String data [] = {taskNameTF.getText(), taskWeightTF.getText(), taskDescriptionTF.getText()};
                        taskTblModel = (DefaultTableModel)taskTable.getModel();
            taskTblModel.addRow(data);

            clearTaskNameTFTaskWeightTF();
        }
    }//GEN-LAST:event_addTaskButtonActionPerformed

    private void clearBandNameTFBandWeightTF() {
        bandNameTF.setText("");
        bandWeightTF.setText("");
        bandDescTF.setText("");
    }
    private void clearBandTblModel() {
        bandTblModel = (DefaultTableModel)bandTable.getModel();
        bandTblModel.setRowCount(0);
    }
    protected void displayExistingTaskBands(ResultSet rs) {
        try {
            while (rs.next()) {
                String band = rs.getString("TaskBandName");
                Float tskWeight = rs.getFloat("TaskBand_Weight");
                String data[] = {band, tskWeight.toString()};
                bandTblModel.addRow(data);
            }
        }
        catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }
    private void taskTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_taskTableMouseClicked
        workModelConfigPanel.setVisible(false);
        subModelConfigPanel.setVisible(false);
        emptyPanel.setVisible(false);
        bandCreationPanel.setVisible(true);
        
        //ensure text fields in the bandPanel are empty
        clearBandNameTFBandWeightTF();
        
        //take the task name user has selected from the table
        String tsk = (String)taskTblModel.getValueAt(taskTable.getSelectedRow(), 0);
        
        //sets the taskNameBand label in the taskPanel to the selcted task name   
        taskNameBand.setText(tsk);
        
        //make table clears before adding any possible bands found in the db
        clearBandTblModel();
        
        //populate the bandTblModel with any existing bands associated with the task clicked
        //Check if the taskName exists in the taskBand table and if it does return the bands 
        //Get workTask_ID for taskName
        workTskId = DatabaseHelperSP.subreturnTskID(HomePage.conn, tsk, workModelId);
        //we have gotten the work id and so now we need to check the taskBand db table to see if both taskName and workTskId exists and if so return the task band info
        ResultSet rs = DatabaseHelperSP.checkTaskBand(HomePage.conn, workTskId); 
        displayExistingTaskBands(rs);
    }//GEN-LAST:event_taskTableMouseClicked

    protected void displayExistingPieChartTasks(Integer id) {
        //assign workModelID to the pieChartName's corresponding WorkModel_ID= id
        workModelId = id;
        //Create result set rs to return task info to the table
        ResultSet rs = DatabaseHelperSP.checkWorkTask(HomePage.conn, workModelId);
        try {
            //use while as it is possible for a WorkModel object to have more than one task and we want to return all of them to the GUI table
            while (rs.next()) {
                System.out.println("This model already has tasks, so we will be displaying them, and then adding ot them.");
                //Get each tasks name and corresponding ratio
                String taskName = rs.getString("WorkTaskName");
                Float ratio = rs.getFloat("WorkModel_Ratio");
                String taskDescr = rs.getString("WorkTaskDescription");
                System.out.println("name: " + taskName + " ratio: " + ratio + " description: " + taskDescr);
                //create the data list so that the task names and ratios can be added to the GUI table
                String data[] = {taskName, ratio.toString(), taskDescr};
                taskTblModel = (DefaultTableModel)taskTable.getModel();
                taskTblModel.addRow(data);
            }                   
        } 
        catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    protected void prepareGUITableForNewModel(String pieChartName, String workModelDesc) {
        //We clear the GUI table just in case a user has finished configuring another Primary pie and it still contains the data
        taskTblModel.setRowCount(0);
        DatabaseHelperSP.insertWorkModelData(HomePage.conn, pieChartName, workModelDesc);  
        // update workModelId with ID of new model which was created in prev line
        workModelId = DatabaseHelperSP.returnID(HomePage.conn, pieChartName);
        System.out.println("newly created work model has Name: " + pieChartName + ", and ID: " + workModelId); 
//        JOptionPane.showMessageDialog(this, "Your new Workmodel name has been created. Please add tasks appropriately!");
    }
    
    private void enterPieChartNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterPieChartNameButtonActionPerformed
        //clear current taskTblModel to make sure it is empty
        taskTblModel.setRowCount(0);
        //the pie name variable is initialised and it's value is the text that user entered into the text field
        String pieChartName = pieChartNameTF.getText();
        String workModelDesc = workModelDescTF.getText();
        if (pieChartName.equals("")) {
            JOptionPane.showMessageDialog(this, "WorkModel Name field cannot be blank. Please enter a WorkModel name!");
        }   
        
        else {
            taskTblWorkModLblValue.setText(pieChartName);
            taskTblWorkModDescLblValue.setText(workModelDesc);
            //Add current tasks from db table
            
            //returnID(name) is called to check if the name entered exists in the WorkModel table and returns it's WorkModel_ID is so, otherwise it returns 0
            Integer id = DatabaseHelperSP.returnID(HomePage.conn, pieChartName);
            System.out.println("work model id: " + id);
            //if id is not 0 that means returnID() retuned an existing WorkModel_ID associated to the pieChartName entered
            if (id != 0) {
                System.out.println(pieChartName + ": This model name exists in the table so we will be adding to it, not creating a new model.");
                displayExistingPieChartTasks(id);
            }
            else {
                //The pieChartName variable does not exist already and must be added to the WorkModel table
                System.out.println(pieChartName + ": This name does not exist so we will be creating a new model and adding new tasks to it.");
                prepareGUITableForNewModel(pieChartName, workModelDesc);
            }
        }
    }//GEN-LAST:event_enterPieChartNameButtonActionPerformed

    protected float getSumAllTasks() {
        float ratioSum = 0;
        //find the sum of all task weights present in the JTable        
        for (int i = 0; i < taskTblModel.getRowCount(); i++) {
            float w = Float.parseFloat(taskTblModel.getValueAt(i, 1).toString());
            ratioSum = ratioSum + w;    
        }
        return ratioSum;
    }
    
    protected void addTableValuesToDataset(DefaultPieDataset pieDataset) { 
        for (int i = 0; i < taskTblModel.getRowCount(); i++) {
            String tsk = (String)taskTblModel.getValueAt(i, 0);
            String rtio = (String)taskTblModel.getValueAt(i, 1);
            pieDataset.setValue(tsk, Float.parseFloat(rtio));
        }
    }
    
    protected void displayPieChart(DefaultPieDataset pieDataset) {    
        JFreeChart chart = ChartFactory.createPieChart(pieChartNameTF.getText(), pieDataset, true, true, false);
        PiePlot p = (PiePlot)chart.getPlot();
        ChartPanel chartPanel = new ChartPanel(chart);
            
        JFrame pieFrame = new JFrame(taskTblWorkModLblValue.getText());
        pieFrame.add(chartPanel);

        chartPanel.addChartMouseListener(new ChartMouseListener(){
            @Override
            public void chartMouseClicked(ChartMouseEvent e) {
                System.out.println(e.getEntity());
                JOptionPane.showMessageDialog(pieFrame, "You have selected " + e.getEntity());
            }
            @Override
            public void chartMouseMoved(ChartMouseEvent e) {}
        }
        );

        pieFrame.setVisible(true);
        pieFrame.setSize(600, 600);
    }
    
    private void viewPieChartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPieChartButtonActionPerformed
        taskTblModel = (DefaultTableModel)taskTable.getModel();
        
        //ratioSum created to find sum of task weights in the Jtable
        float ratioSum = getSumAllTasks();
        
        //if the weights sum up to more than 100, pie chart cannot be made
        //return appropriate message to the user
        if (ratioSum != 100) {
            JOptionPane.showMessageDialog(this, "Your tasks need to sum up to 100 in order to be saved! They currently add up to " + ratioSum);
        }
        else {
            DefaultPieDataset pieDataset = new DefaultPieDataset();
            addTableValuesToDataset(pieDataset);
            
            // display pie chart
            displayPieChart(pieDataset);
        }
    }//GEN-LAST:event_viewPieChartButtonActionPerformed

    protected boolean doesBandExist() {
        //find out whether the band name entered already exists
        boolean bandExists = false;
        for (int i = 0; i  <bandTblModel.getRowCount(); i++) {
            String bandName = (String)bandTblModel.getValueAt(i, 0);
            if (bandName.equalsIgnoreCase(bandNameTF.getText())) {
                bandExists = true;                
            }
        }
        return bandExists;
    }
    
    private void addBandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBandButtonActionPerformed
        //***** IMPORTANT TO NOTE: the bands are not added to the db here as there might be deletions. 
        // Instead they are only added to the GUI table here and once they select the "save changes" button, insertions are made to the db.
        boolean bandExists = doesBandExist();   //find out whether the band name entered already exists
        bandTblModel = (DefaultTableModel)bandTable.getModel();      
        
        if (bandNameTF.getText().equals("") || bandWeightTF.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Fields cannot be empty. Please enter all data!");
        }
        else if( Float.parseFloat(bandWeightTF.getText())>1 || Float.parseFloat(bandWeightTF.getText())<0) {
            JOptionPane.showMessageDialog(this, "Your band weight can only be between 0 and 1!");
        }
        else if (bandExists) {
            JOptionPane.showMessageDialog(this, "This band name already exists and cannot be created for the task!");
        }
        else {
            String data [] = {bandNameTF.getText(), bandWeightTF.getText(), bandDescTF.getText()};
            
            bandTblModel = (DefaultTableModel)bandTable.getModel();
            bandTblModel.addRow(data);
            
            clearBandNameTFBandWeightTF();         
        }
    }//GEN-LAST:event_addBandButtonActionPerformed

    private boolean ensureNoBandsEqual(){
        boolean equals = true;
        List bandWeights = new ArrayList<>();
        for (int i = 0; i < bandTblModel.getRowCount(); i++) {
            Object weight = bandTblModel.getValueAt(i, 1);
            if(!bandWeights.contains(weight)){
                bandWeights.add(weight);
            }else{
                return false;
            }                        
        }
        return equals;
    }
    
    protected float getSumAllBands() {
        float ratioSum = 0;
        for (int i = 0; i < bandTblModel.getRowCount(); i++) {
            float weight = Float.parseFloat(bandTblModel.getValueAt(i, 1).toString());
            ratioSum = ratioSum + weight;
        }
        return ratioSum;
    }
    
    protected void addNewTaskBand(String bandName, Float bandWeight, String bandDesc) {    
        //checkTaskBand() method which takes the workTask_ID, name and weight and returns a result set of bands
        ResultSet rs = DatabaseHelperSP.checkTaskBandName(HomePage.conn, workTskId, bandName, bandWeight);
        try {
            //if this current taskband already exists in the TaskBand table then it does not need to be inserted again 
            if (rs.next()) {
                System.out.println("Band exists. No changes needed!!");
            }
            else {
                //this current rs.next() taskband is new and must be inserted into the table
                System.out.println("Adding band!");
                DatabaseHelperSP.insertIntoTaskBandTable(HomePage.conn, workTskId, bandName, bandDesc, bandWeight);  
                DatabaseHelperSP.insertNoWorkRequiredBand(HomePage.conn, workTskId);
            } 
        }
        catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }
    
    protected void saveBandChanges() {
        bandTblModel = (DefaultTableModel)bandTable.getModel();  
        //do all of the following for each band in bandTable
        for (int i = 0; i < bandTblModel.getRowCount(); i++) {
            String bandName = (String)bandTblModel.getValueAt(i, 0);
            Float bandWeight = Float.parseFloat(bandTblModel.getValueAt(i, 1).toString());
            String bandDesc = (String)bandTblModel.getValueAt(i, 2);
            
            addNewTaskBand(bandName, bandWeight, bandDesc); // works one band at a time
        }
        JOptionPane.showMessageDialog(this, "Your changes have been saved!");
    }
    
    protected void deleteBandsInDeletedList() {
        for (int i = 0; i < deletedBands.size(); i++) {
            //if band in DeletedBands list exists in db, delete from TaskBand table in DB
            String s = deletedBands.get(i);
            DatabaseHelperSP.deleteBand(HomePage.conn, s, workTskId);
        } 
    }

    private void saveChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveChangesButtonActionPerformed
        bandTblModel = (DefaultTableModel)bandTable.getModel();
        //find the sum of all task weights present in the JTable   
        float ratioSum = getSumAllBands();
        
        if (!ensureNoBandsEqual()){
            JOptionPane.showMessageDialog(this, "You cannot have two of the same band weights!");
        }   
        else {
            deleteBandsInDeletedList();
            saveBandChanges();
        }
    }//GEN-LAST:event_saveChangesButtonActionPerformed

    protected void displayTasksForSelectedWorkModel() {
        ResultSet rs = DatabaseHelperSP.checkWorkTask(HomePage.conn, workModelId);
            try {
                //use while as it is possible for a WorkModel object to have more than one task and we want to return all of them to the GUI table
                while (rs.next()) {
                    System.out.println("The workModel name has tasks in the table!");
                    //Get each tasks name and corresponding ratio
                    String taskName = rs.getString("WorkTaskName");
                    Float ratio = rs.getFloat("WorkModel_Ratio");
                    String taskDesc = rs.getString("WorkTaskDescription");
                    System.out.println("name: " + taskName + " ratio: " + ratio);
                    //create the data list so that the task names and ratios can be added to the GUI table
                    String data [] = {taskName, ratio.toString(), taskDesc};
                    wrkTaskTblModel = (DefaultTableModel)subPrimTaskDisplayTable.getModel();
                    wrkTaskTblModel.addRow(data);
                }
            } 
            catch (SQLException e){
                System.out.println(e.getMessage());
            }
    }

    private void subModelComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_subModelComboBoxItemStateChanged
        wrkTaskTblModel.setRowCount(0);
        //this if statement ensures that the code within is called ONLY when the comboBox contains WorkModelNames in it
        //it solves an error which occurs when we call subModelComboBox.removeAllItems in wardPieSelectionActionPerformed(). When subModelComboBox.removeAllItems is called,
        //it technically changes item state as it removes them all. However we need to remove all otherwise we will have duplicate WorkModelNames in the ComboBox every time we select ward config
        if (subModelComboBox.getItemCount() > 1) {
            //this bool will be used to in enterSubModelName() to ensure that a WorkModel has been selected before a sub model name is entered.
            subModComboClicked = true;
            String workModNameCombo = subModelComboBox.getSelectedItem().toString();
            //update the WorkModel_ID to that of the selected WorkModelName
            workModelId = DatabaseHelperSP.returnID(HomePage.conn, workModNameCombo);
            //the below method is called so we can check if any WorkTask items exist in the WorkTask table associated with the WorkModel_ID
            displayTasksForSelectedWorkModel();
        }
    }//GEN-LAST:event_subModelComboBoxItemStateChanged

    protected void deleteTaskThatUserEntered(String taskToDelete) {    
        for (int i = 0; i < taskTblModel.getRowCount(); i++){
            String t = taskTblModel.getValueAt(i, 0).toString();
            System.out.println("t equsl: " + t);
            if (taskToDelete.equals(t)) {
                System.out.println("task to delete equals t");
                taskTblModel.removeRow(i);
                deletedTasks.add(t);
                JOptionPane.showMessageDialog(this, taskToDelete + " was deleted"); 
            }
        }
    }
    
    private void deleteTaskButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteTaskButtonMouseClicked
        //**** IMPORTANT TO NOTE: We want to delete tasks from GUI tabel ONLY!!! 
        //Deletions to the database are carried out when the user selects "save changes".
        taskTblModel = (DefaultTableModel)taskTable.getModel(); 
        String taskToDelete = JOptionPane.showInputDialog(this, "Please enter the task name to delete:");
        
        // check here if user clicks okay then do the next line, but if user clicks cancel, do nothgin
        if (taskToDelete != null) {
            System.out.println("task to be deleted is: " + taskToDelete);
            deleteTaskThatUserEntered(taskToDelete);
        }
    }//GEN-LAST:event_deleteTaskButtonMouseClicked

    protected void addNewTask(String taskName, Float taskWeight, String taskDescription) {
        //check if each task name is already in the workTask db table by calling the checkTaskName method
        ResultSet rs = DatabaseHelperSP.checkWorkTaskName(HomePage.conn, taskName, workModelId);
            try {
                //if the worktask table does contain the name and workModel_id, the task does exist and must not be changed as it was never deleted in delete task method
                if (rs.next()) {
                    System.out.println("Task name already exists and does not need to be changed");                                            
                }
                else {
                    //this task is new and can be inserted!
                    System.out.println("Adding task !");
                    DatabaseHelperSP.insertIntoTaskTable(HomePage.conn, workModelId, taskName, taskDescription, taskWeight);
                    System.out.println("new task added");
                }                                        
            }
            catch (SQLException e) {
                System.out.println(e.getMessage());
            }
    }

    protected void saveTaskChanges () {
        //Add to WorkTask table
        //need to know: WorkModel_ID, WorkTaskName, WorkTaskDescription, WorkModel_Ratio, DTStamp
        for (int i = 0; i  <taskTblModel.getRowCount(); i++) {
            String taskName = (String)taskTblModel.getValueAt(i, 0);
            Float taskWeight = Float.parseFloat(taskTblModel.getValueAt(i, 1).toString());
            String taskDescr = (String)taskTblModel.getValueAt(i, 2);
            
            addNewTask(taskName, taskWeight, taskDescr);  
        }
        JOptionPane.showMessageDialog(this, "Your changes have been saved. Remember, you must select each task on the table and configure its bands!"); 
    }
    
    protected void deleteTasksInDeletedList() {
        for (int i = 0; i < deletedTasks.size(); i++) {
            //if deleted task name exists in db, delete from WorkTask table in db.
            String deletedTask = deletedTasks.get(i);
            //Note: the second arg is workModelId. This is to avoid deleting any tasks with the same name that exist in a different WorkModel.
            DatabaseHelperSP.deleteTask(HomePage.conn, deletedTask, workModelId);
        } 
    }

    private void saveTaskChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTaskChangesButtonActionPerformed
        //ratioSum created to find sum of task weights in the Jtable
        taskTblModel = (DefaultTableModel)taskTable.getModel();
        float ratioSum = getSumAllTasks();
        
        //if the weights sum up to more than 100, pie chart cannot be made
        //return appropriate message to the user
//        if (ratioSum != 100) {
//            JOptionPane.showMessageDialog(this, "Your tasks currently sum to " + ratioSum + ". They need to sum up to 100 to be saved!");
//        } 
        
//        else {
            //properly delete any previously deleted tasks from the GUI table
            //note that the list called deletedTasks contains the task name of all deleted tasks from the JTable
            deleteTasksInDeletedList();
            saveTaskChanges();
//        }
    }//GEN-LAST:event_saveTaskChangesButtonActionPerformed

    protected void displaySubModelTaskAndWeight(Integer taskId) {
        ResultSet rs2 = DatabaseHelperSP.checkWorkTask(HomePage.conn, workModelId);
            try {
                while (rs2.next()) {
                    if (taskId.equals(rs2.getInt("WorkTask_ID"))) {
                        String taskName = rs2.getString("WorkTaskName");
                        Float ratio = rs2.getFloat("WorkModel_Ratio");
                        System.out.println("name: " + taskName + " ratio: " + ratio);
                        //create the data list so that the task names and ratios can be added to the GUI table
                        String data[] = {taskName, ratio.toString()};
                        subTblModel = (DefaultTableModel)subModeljTable.getModel();
                        subTblModel.addRow(data); 
                    }                                                               
                }    
            }
            catch (SQLException e) {
                System.out.println(e.getMessage());
            }
    }

    protected void displayExistingSubModelTasks(Integer subId) {
        System.out.println(subId);
        //Create result set rs to check if the subModel_ID has any existing WorkTask_IDs associated with it from SubModelTask table
        ResultSet rs = DatabaseHelperSP.checkWorkSubTask(HomePage.conn, subId);
        try {
            while (rs.next()) {
                System.out.println("The workSubModel name has tasks in the table!");
                Integer taskId = rs.getInt("WorkTask_ID");
                //Now find all the WorkTask info associated with the current WorkTask_ID
                displaySubModelTaskAndWeight(taskId);
            }
        } 
        catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }
    
    protected void prepareGUITableForNewSubModel(String subName, String subDesc) {
        //We clear the GUI table just in case it contains any data from a previous config
        subTblModel.setRowCount(0);
        DatabaseHelperSP.insertWorkSubModelData(HomePage.conn, workModelId, subName, subDesc);
        //Call returnID(name) to update the workModelId variable to the current primary pie chart name's WorkModel_ID from the WorkModel table
        subId = DatabaseHelperSP.subreturnID(HomePage.conn, subName);
        System.out.println("sub model id is: " + subId); 
        JOptionPane.showMessageDialog(this, "Your new sub model has been created named: " + subName + ". Please add tasks appropriately!");
    }
    
    private void enterSubModNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterSubModNameButtonActionPerformed
        //Make sure the table clears
        subTblModel.setRowCount(0);
        String subName = subModNameTF.getText();
        String subDesc = subModDescTF.getText();
        
        //Check if the text field contains an empty string and return appropriate message
        if (subName.equals("")) {
            JOptionPane.showMessageDialog(this, "SubModelName fields cannot be blank. Please enter a sub-model name!");
            //this refers back to subModelComboBoxItemStateChanged()
        }
        else if (!subModComboClicked) {
            JOptionPane.showMessageDialog(this, "Please select a Primary model name!");
            subModNameTF.setText("");
            subModDescTF.setText("");
        }
        else {           
            //returnID(subName) is called to check if the name entered exists in the WorkSubModel table and returns it's WorkSubModel_ID is so, otherwise it returns 0
            subId = DatabaseHelperSP.subreturnID(HomePage.conn, subName);
            //if name exists in the WorkModel table
            if (subId != 0) {
                // display existing models
                System.out.println("The sub mod name exists in the table!");
                displayExistingSubModelTasks(subId);
            }
            else {
                // id = 0 so this is a new submodel 
                // else prepare gui for new model
                //The name variable does not exist already and must be added to the WorkModel table
                System.out.println("Does not exist!");
                prepareGUITableForNewSubModel(subName, subDesc);
            }
        }
    }//GEN-LAST:event_enterSubModNameButtonActionPerformed

    protected boolean doestaskExistinSub(String tsk) {
        boolean taskExistsInSub = false; 
        for (int i = 0; i < subTblModel.getRowCount(); i++) {
            String subTsk = (String)subTblModel.getValueAt(i, 0);
            if (tsk.equals(subTsk)) {
                taskExistsInSub = true;
            }
        }
        return taskExistsInSub;
    }
    
    private void subPrimTaskDisplayTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subPrimTaskDisplayTableMouseClicked
        // move task selected to sub model table
        //if the task name selected already exists in the submodel it cannot be added
        //if no sub model name has been entered return approp msg
        subTblModel = (DefaultTableModel)subModeljTable.getModel();  
        wrkTaskTblModel = (DefaultTableModel)subPrimTaskDisplayTable.getModel();
        
        String tsk = (String)wrkTaskTblModel.getValueAt(subPrimTaskDisplayTable.getSelectedRow(), 0);
        String rtio = (String)wrkTaskTblModel.getValueAt(subPrimTaskDisplayTable.getSelectedRow(), 1);
        String tskDesc = (String)wrkTaskTblModel.getValueAt(subPrimTaskDisplayTable.getSelectedRow(), 2);
        boolean taskExistsInSub = doestaskExistinSub(tsk);
        
        if (subModNameTF.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "SubModelName field cannot be blank. Please enter a sub model name before selecting tasks");
            // this only tell user that it cant be blank. need to actually MAKE them enter name. same in else if below
        }
        else if (taskExistsInSub) {
            JOptionPane.showMessageDialog(this, "This task already exists in your sub model table. Please select another one!");
        }
        else {
            String data[] = {tsk, rtio, tskDesc};  
            subTblModel = (DefaultTableModel)subModeljTable.getModel();
            subTblModel.addRow(data);  
        }  
    }//GEN-LAST:event_subPrimTaskDisplayTableMouseClicked

    protected float getSumAllSubModelTaskRatios() {   
        //declare sumSubTbl var for weight reconfig
        float sumSubTbl = 0;
        //calculate total sum of all task weights 
        for (int i = 0; i < subTblModel.getRowCount(); i++) {
            float w = Float.parseFloat(subTblModel.getValueAt(i, 1).toString());
            sumSubTbl = sumSubTbl + w;
        }
        return sumSubTbl;
    }
    
    protected void addsubTableValuesToDataset(DefaultPieDataset pieDataset) { 
        for (int i = 0; i < subTblModel.getRowCount(); i++) {
            String tsk = (String)subTblModel.getValueAt(i, 0);
            String rtio = (String)subTblModel.getValueAt(i, 1);
            pieDataset.setValue(tsk, Float.parseFloat(rtio));
        }
    }
    
    private void viewSubModelSample() {                                                   
        subTblModel = (DefaultTableModel)subModeljTable.getModel();
        
        //ratioSum created to find sum of task weights in the Jtable
        float ratioSum = getSumAllSubModelTaskRatios();
        
        //if the weights sum up to more than 100, pie chart cannot be made
        if (ratioSum != 100) {
            JOptionPane.showMessageDialog(this, "Your sub model tasks need to sum up to 100 in order to be saved! They currently add up to " + ratioSum);
        }
        else {
            DefaultPieDataset pieDataset = new DefaultPieDataset();
            addsubTableValuesToDataset(pieDataset);
            
            // display pie chart
            displayPieChart(pieDataset);
        }
    }
    
    private void viewSubModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewSubModelActionPerformed
        double sumSubTbl = getSumAllSubModelTaskRatios();        
        //Iterate through the tasks chosen for the subModel in the subModel Jtable
        for (int i = 0; i < subTblModel.getRowCount(); i++) {
            //Notice we only look at row 0, ie (String)subTblModel.getValueAt(0,0) This is because once the task weight is reconfigured it is removed from th Jtable
            //and then a new row is added with it's reconfigured task ratio/weight
            //new rows are added to the bottom of the Jtable so the next task weight to be reconfured moves up to row position 0
            String taskName = (String)subTblModel.getValueAt(0, 0);
            double subWeight = Double.parseDouble(subTblModel.getValueAt(0, 1).toString());
            String taskDesc = (String)subTblModel.getValueAt(0, 2);
            //this is the calculation for our new submodel pie chart, we divide the current weight by sumSubTbl(sum of weights calculated above)
            //and then multiply by 100 so that it acts as a percentage number
            String newRatio = String.format("%f", (subWeight/sumSubTbl)*100);
            String data2[] = {taskName, newRatio, taskDesc};
            subTblModel.addRow(data2);
            //as mentioned above original task row is deleted. When this happens the next task to update with become row(0)
            subTblModel.removeRow(0);  
            // subTblModel.removeRow(0); is used bc this doe loop goes through tasks from top row downwards
            // it calculates new weight, and adds new data to table (at bottom row of table) 
            // so at this point we want to remove the top row bc it is now deprecated 
        }
        
        viewSubModelSample();
    }//GEN-LAST:event_viewSubModelActionPerformed

    protected void saveSubModelChanges(Integer wrkTskId) {
        //check subModelTask table for the same subModel_ID and workTask_ID
        ResultSet rs = DatabaseHelperSP.checkSubWorkTaskName(HomePage.conn, subId, wrkTskId);
            try {
                if (rs.next()) {
                    //if task name already exists in sub model, it does not need to be inserted
                    System.out.println("Sub Task name already exists and does not need to be changed");
                }
                else {
                    //insert into subModeltask table subId, workTaskID
                    DatabaseHelperSP.insertIntoSubTaskTable(HomePage.conn, subId, wrkTskId);
                }
            }
            catch (SQLException e) {
                System.out.println(e.getMessage());
            }
        }

    private void subSaveChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subSaveChangesActionPerformed
//        //ensure tasks add to 100
//        float subrtioSum = getSumAllSubModelTaskRatios();
//        // iterate through the jtable
//        if (subrtioSum != 100) { 
//            JOptionPane.showMessageDialog(this, "Your sub model tasks add up to: " + subrtioSum + ". " + "Your tasks need to sum up to 100 in order to be saved! "
//                    + "Make sure to press the 'ViwPieChart' button to get a preview of your SubModel and to update the task weights before you save your changes.");
//        }  
//        else {
//            
//            for (int i = 0; i < subTblModel.getRowCount(); i++) { // for each task in submodel GUI table
//                String subTskNme = (String)subTblModel.getValueAt(i, 0);    // harley needs help (i,0) what tey stand for
//                //get worktask id
//                //return workTaskID from workTask table given task name and workModel id
//                Integer wrkTskId = DatabaseHelperSP.subreturnTskID(HomePage.conn, subTskNme, workModelId);
//                
//                saveSubModelChanges(wrkTskId);
//            }
//            JOptionPane.showMessageDialog(this, "Your changes have been saved!"); 
//        }
        
        
        int dialogResult = JOptionPane.showConfirmDialog(this, "Save sub model task changes?");
                if (dialogResult == JOptionPane.YES_OPTION){
                    for (int i = 0; i < subTblModel.getRowCount(); i++) { // for each task in submodel GUI table
                    String subTskNme = (String)subTblModel.getValueAt(i, 0);    // harley needs help (i,0) what tey stand for
                    //get worktask id
                    //return workTaskID from workTask table given task name and workModel id
                    Integer wrkTskId = DatabaseHelperSP.subreturnTskID(HomePage.conn, subTskNme, workModelId);
                
                    saveSubModelChanges(wrkTskId);
                }
                JOptionPane.showMessageDialog(this, "Your changes have been saved!"); 
                }
                
                
        
        
    }//GEN-LAST:event_subSaveChangesActionPerformed

    private void bandDeleteButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bandDeleteButtonMouseClicked
        //***** IMPORTANT: similar to task deletion method, 
        // we are only deleting the bands from the Jtable and waiting for user to selct "save changes" to perform deletions to the db
        //delete band from TaskBand table
        bandTblModel = (DefaultTableModel)bandTable.getModel();   
        String bandToDelete = JOptionPane.showInputDialog(this, "Please enter the band name to delete:");
        System.out.println("band to delete is: " + bandToDelete);
        
        for (int i = 0; i < bandTblModel.getRowCount(); i++) {
            String t = bandTblModel.getValueAt(i, 0).toString();
            if (bandToDelete.equals(t)) {
                bandTblModel.removeRow(i);
                deletedBands.add(t);
                JOptionPane.showMessageDialog(this, bandToDelete + " was deleted");
            }
            else {
                System.out.println(bandToDelete + " was not deleted");
            }
        }
        
    }//GEN-LAST:event_bandDeleteButtonMouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // BACK TO PRI CONFIG FROM BAND CONFIG
        workModelConfigPanel.setVisible(true);
        subModelConfigPanel.setVisible(false);
        emptyPanel.setVisible(false);
        bandCreationPanel.setVisible(false);
        
        // make below into method ? harley needs ehlp knwing what they do first
        //the following lines of code ensure that all tables and text fields are empty
        pieChartNameTF.setText("");
//        taskTablePieNameLabel.setText("");
    }//GEN-LAST:event_jLabel2MouseClicked

    private void myAccountLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_myAccountLabelMouseClicked
        // BACK TO HOME FROM CONFIG 
        patientPanel.setVisible(false);
        staffPinPanel.setVisible(false);
        accountHomePanel.setVisible(true);
        analysisPanel.setVisible(false);
        configurationPanel.setVisible(false);  
        
        myAccountLabel.setText("My Account");
    }//GEN-LAST:event_myAccountLabelMouseClicked

    private void configDeptWardSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configDeptWardSelectionActionPerformed
        bandJP.setVisible(false);
        //display ward to model j panel
        deptWardAssignmentPanel.setVisible(true); 
        deptSelectionJP.setVisible(true);
        emptyWardComboJP.setVisible(true);
        fullWardComboJP.setVisible(false);
        workSubModDisplayJP.setVisible(false);
        deptWorkModJP.setVisible(false);
        wardSubModJP.setVisible(false);      
        
        workModelConfigPanel.setVisible(false);
        subModelConfigPanel.setVisible(false);
        emptyPanel.setVisible(false);
        bandCreationPanel.setVisible(false);
                 
        //create work and sub table models and set row count to zero
        wardToSubTblModel = (DefaultTableModel)subModelTable.getModel();
        deptToWorkTblModel = (DefaultTableModel)deptWorkModelTable.getModel();
        defaultBandTblModel = (DefaultTableModel)taskBandTable.getModel();
        wardToSubTblModel.setRowCount(0);
        deptToWorkTblModel.setRowCount(0);
        

        clearComboBox(deptComboBox, "department");

        ResultSet rs = DatabaseHelperSP.returnDeptNames();
        fillComboBox(rs);
    }//GEN-LAST:event_configDeptWardSelectionActionPerformed

    private void configWardComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_configWardComboBoxItemStateChanged
//         Display All Sub Model with the departments WorkModId
//        String wardName = configWardComboBox.getItemAt(0);
//        if(wardName != null && !wardName.equals("ward")){           
//        }
        if(configWardComboBox.getItemCount()>1){
            String wName = configWardComboBox.getSelectedItem().toString();
            wardTF.setText(wName);
            fillSubModTable();
            workSubModDisplayJP.setVisible(true);
            deptWorkModJP.setVisible(false);
            wardSubModJP.setVisible(true);  
        }        
    }//GEN-LAST:event_configWardComboBoxItemStateChanged

    private void deptComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_deptComboBoxItemStateChanged
        deptTF.setText("");
        //if the count is more than one it means that departments exist in the db
        if (deptComboBox.getItemCount()>1){
            String deptName = deptComboBox.getSelectedItem().toString();
            deptTF.setText(deptName);
            int workModId = DatabaseHelperSP.returnDepWorkModelID(deptName);
            //if workModId is 0 it means that no work mod id exists in the db 
            if(workModId!=0){deptWorkModelId = workModId;}
            //set the work model table visible to the user and fill it with work model names and descriptions
            workSubModDisplayJP.setVisible(true);
            deptWorkModJP.setVisible(true);
            wardSubModJP.setVisible(false);
            fillWorkModTable();            
            
            clearComboBox(configWardComboBox, "Ward");
            fillWardComboBox(deptName);
            
            //workModelTF.setText(workModeNameExisting);
        }//else return message that no departments exist
    }//GEN-LAST:event_deptComboBoxItemStateChanged

    private void deptWorkModelTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deptWorkModelTableMouseClicked
        // pop up message asking user if they are sure they want to add the work model to that dept
        String clickedWorkModName = (String)deptToWorkTblModel.getValueAt(deptWorkModelTable.getSelectedRow(), 0);
        String clickedWorkId = (String)deptToWorkTblModel.getValueAt(deptWorkModelTable.getSelectedRow(), 1);
        deptWorkModelId = Integer.parseInt(clickedWorkId);
        String deptName = deptTF.getText();
        //find id associated with department name
        //if yes selected update department table with 
        if(JOptionPane.showConfirmDialog(this,"Save work model " + clickedWorkModName + " to department " + deptName + "?", "Save Work Model", 
                JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION){
            //update table
            System.out.println("Update dept table");
            DatabaseHelperSP.updateDeptTable(deptWorkModelId, deptName);
            workModelTF.setText(clickedWorkModName);
            deptWorkModJP.setVisible(false);
            wardSubModJP.setVisible(false);
            
            fullWardComboJP.setVisible(true);
        }else{
            System.out.println("table exited and or no clicked");
        }
        
    }//GEN-LAST:event_deptWorkModelTableMouseClicked

    private void subModelTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subModelTableMouseClicked
//Lists made to store all task info, will be used when creating the pie chart for display
//subModelTaskIds is now global var so we can tell the user any task names they didnt set default bands for
//        List taskNames = new ArrayList<String>();
        List taskRatios = new ArrayList<String>();
//subModelTaskIds is now a global variable as we want to make sure all task bands were set a default and need this list to do so later in saveChanges button selected method below
//        List taskIds = new ArrayList<Integer>();

        //show up pie chart for tasks to be selected
        String subModName = (String)wardToSubTblModel.getValueAt(subModelTable.getSelectedRow(), 0);
        subModelTF.setText(subModName);
        subModIdForDefault = Integer.parseInt((String)wardToSubTblModel.getValueAt(subModelTable.getSelectedRow(), 2));
        System.out.println("Sub model id for " + subModName + " is: " + subModIdForDefault);
        
        ResultSet rs = DatabaseHelperWorkLog.returnPatientPieInfo(subModIdForDefault);
        //clear subModelTaskIds and subModelTaskNames list to ensure that only the submodel tasks are added associated to the clicked sub model
        subModelTaskIds.clear();
        subModelTaskNames.clear();
        storeTaskInfoInLists(rs, subModelTaskNames, taskRatios, subModelTaskIds);
        System.out.println("sub model task id list: " + subModelTaskIds);
        System.out.println("sub model task names: " + subModelTaskNames);
        displayPieAndRespondToClick(subModelTaskNames, taskRatios, subModelTaskIds, subModName);
    }//GEN-LAST:event_subModelTableMouseClicked

    private void taskBandTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_taskBandTableMouseClicked
        // ADD Band Id to the hidden table
        String bandIdStr = (String)taskBandTable.getValueAt(taskBandTable.getSelectedRow(), 1);
        System.out.println("clicked band id: " + bandIdStr);
        Integer taskId = Integer.parseInt((String)defaultBandTblModel.getValueAt(taskBandTable.getSelectedRow(), 2));
        System.out.println("clicked band task id: " + taskId);
        
        updateRowInJTable(bandIdDefaultTable, taskId, bandIdStr);
        
        //add task Id to a list to keep track of tasks to ensure all task default bands are selected when saved later on
        defaultTaskBandsLogged.add(taskId);
        System.out.println("logged task Id list: " + defaultTaskBandsLogged);
        
        defaultBandTblModel.setRowCount(0);
        bandFrame.dispose();
        bandFrame.setVisible(false);
    }//GEN-LAST:event_taskBandTableMouseClicked

    private void saveDefaultChangesJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDefaultChangesJBActionPerformed
        //create list of any tasks which don't have default bands
        List tasksWithoutDefaults = new ArrayList<String>();
        // check that all tasks in the submodel have default bands chosen
        for(int i=0; i<subModelTaskIds.size(); i++){
            if(!defaultTaskBandsLogged.contains(subModelTaskIds.get(i))){
                //find id's task name and add to the tasksWithoutDefault List
                String taskName = returnTaskName(subModelTaskIds.get(i), subModelTaskNames, subModelTaskIds);
                System.out.println("Task name after returnTaskName: " + taskName);
                tasksWithoutDefaults.add(taskName);
            }
        }
        //check if tasksWithoutDefaults is empty and if it is not display error message to user
        if(tasksWithoutDefaults.size()>0){
            String tasks = String.join(", ", tasksWithoutDefaults);
            JOptionPane.showMessageDialog(this, "You have not created default bands for " + tasks + ". \nYou need to create default bands for these tasks before you can save your changes!");
        }else{
            System.out.println("you have selected defaults for all of the tasks");
            String currSubMod = subModelTF.getText();
            String currWard = configWardComboBox.getSelectedItem().toString();
            //add info into table
            //display input option pane for name of default sub model name
            String subModDefaultName = JOptionPane.showInputDialog(this, "Enter the name you would like to call this default sub model \ne.g. " + currWard + "Default.");
            String message = "Are you sure you want to save the default sub model for " + currWard + "\n as " + subModDefaultName + "?";
            if(!subModDefaultName.isBlank()){ 
                int dialogResult = JOptionPane.showConfirmDialog(this, message);
                if (dialogResult == JOptionPane.YES_OPTION){
                    //add workMod ID, subModDefaultName to SubModDefault
                    updateSubModelDefaultDBTable(deptWorkModelId, subModDefaultName);
                    //get the subModDefault ID with workMod ID
                    Integer defaultId = subModDefaultId(subModIdForDefault);
                    //add subModDefault ID, band ID into subModDefBand

                    addBandIdsToDefaultDBTable(defaultId, bandIdDefaultTable);
                    
                }
            }else{
                JOptionPane.showMessageDialog(this, "You need to enter a sub model default name!");
            } 
        }
    }//GEN-LAST:event_saveDefaultChangesJBActionPerformed

    private void changePasswordForUser(String user, char [] oldPw, char [] newPw) {
        if(user.isEmpty() || oldPw.length == 0) {
            JOptionPane.showMessageDialog(this, "Please enter a username and password.");
        }
        
        else if (HomePage.isPasswordCorrect(HomePage.conn, user, oldPw)) {   // if old pw matched user
            // then remove old pw and add new pw to DB
            DatabaseHelperSP.updatePwForUser(user, newPw);

        } 
        else {
            JOptionPane.showMessageDialog(this, "Invalid username/password combination, try again");    // old pw doesnt match user
        }
    }

    
    private void editAPasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editAPasswordButtonActionPerformed
        staffTblModel = (DefaultTableModel)staffTable.getModel();
        
        JTextField user = new JTextField();
        JPasswordField oldPw = new JPasswordField();
        JPasswordField newPw = new JPasswordField();
        
        Object [] fields = {
        "username", user,
        "old password", oldPw,
        "new password", newPw};
        
        JOptionPane.showConfirmDialog(null, fields, "Change password.", JOptionPane.OK_CANCEL_OPTION);
        
        changePasswordForUser(user.getText(), oldPw.getPassword(), newPw.getPassword());
        staffTblModel = (DefaultTableModel) staffTable.getModel(); 
        staffTblModel.setRowCount(0);
        
        addStaffInfoToStaffTable();

    }//GEN-LAST:event_editAPasswordButtonActionPerformed

    private void subModelComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subModelComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_subModelComboBoxActionPerformed

    private void logOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutButtonActionPerformed
        
        new HomePage().setVisible(true);
        dispose();
    }//GEN-LAST:event_logOutButtonActionPerformed
    
    //this fills the combo box with department names from the db
    private void fillComboBox(ResultSet rs){        
        try{
            while(rs.next()){
                    String deptName = rs.getString("DepName");
                    deptComboBox.addItem(deptName);
                }            
        }catch(SQLException e){
            System.out.println(e);
        }
    }

    //NEED SP FOR THIS FUNCTION!!!
    private void fillWardComboBox(String deptName){
        List wardNames = new ArrayList<>();
        //fill the combo box with ward names --> Ward table
        ResultSet rs = DatabaseHelperSP.returnDeptWards(deptName);
        try{
            while(rs.next()){
                    String wardName = rs.getString("WardName");
                    if(!wardNames.contains(wardName)){
                        wardNames.add(wardName);
                        configWardComboBox.addItem(wardName);
                    }
                }            
        }catch(SQLException e){
            System.out.println(e);
        }    
    }
    
    private void clearComboBox(JComboBox comboBox, String firstItem){
        comboBox.removeAllItems();
        comboBox.addItem(firstItem);   
    }
    
    private void fillWorkModTable(){
        deptToWorkTblModel.setRowCount(0);
        ResultSet rs = DatabaseHelperSP.returnWorkModelInfo();
            try {
                while (rs.next()) {
                    String workModName = rs.getString("WorkModelName");
                    int id = rs.getInt("WorkModel_ID");
                    String workModDesc = rs.getString("WorkModelDescription");
                    String data [] = {workModName, Integer.toString(id), workModDesc};
                    deptToWorkTblModel.addRow(data);
                }
            } 
            catch (SQLException e){
                System.out.println(e.getMessage());
            }
    }
    
    private void fillSubModTable(){
        wardToSubTblModel.setRowCount(0);
        ResultSet rs = DatabaseHelperSP.returnSubModelInfo(deptWorkModelId);
            try {
                while (rs.next()) {
                    String subModName = rs.getString("WorkSubModelName");
                    String subModDescr = rs.getString("WorkSubModelDescription");
                    Integer id = rs.getInt("WorkSubModel_ID");
                    String data [] = {subModName, subModDescr, id.toString()};
                    System.out.println("subModel data: " + subModName + " " + id);
                    wardToSubTblModel.addRow(data);
                }
            } 
            catch (SQLException e){
                System.out.println(e.getMessage());
            }
    }
    
    public void storeTaskInfoInLists(ResultSet rs, List names, List ratios, List ids){
        try{
            while(rs.next()){
                    String taskName = rs.getString("WorkTaskName");
                    names.add(taskName);
                    Float taskRatio = rs.getFloat("TaskSubModelRatio");
                    ratios.add(taskRatio);
                    Integer taskId = rs.getInt("WorkTask_ID");
                    ids.add(taskId);
                }            
        }catch(SQLException e){
            System.out.println(e);
        }
    }
    
    public void displayPieAndRespondToClick(List names, List ratios, List ids, String title){
        JFrame pieFrame = new JFrame("Sub Model Pie Chart");
        System.out.println("task name list in pie method: " + names);
        System.out.println("task id list in pie method: " + ids);
        
        //display pie
        DefaultPieDataset pieDatasetDefaults = new DefaultPieDataset();
        fillPieDataSetDefaults(names, ratios, pieDatasetDefaults);
        
        JFreeChart chart = ChartFactory.createPieChart(title, pieDatasetDefaults, true, true, false);
        PiePlot p = (PiePlot)chart.getPlot();
        ChartPanel chartPanel = new ChartPanel(chart); 
        pieFrame.add(chartPanel);
        
        pieFrame.setVisible(true);
        pieFrame.setSize(600, 600);
        
        chartPanel.addChartMouseListener(new ChartMouseListener(){
            @Override
            public void chartMouseClicked(ChartMouseEvent e) {
                //get the taskName that was clicked
                String ent = e.getEntity().toString();
                System.out.println("entity: " + ent);
                //call taskClicked method to concatenate the entity which contains the task name
                clickedTaskName = taskClicked(ent);
                System.out.println("Task clicked: " + clickedTaskName);
                //check for the name and it's corresponding ratio from the lists
                clickedTaskRatio = returnClickedTaskRatio(clickedTaskName, names, ratios);
                clickedTaskId = returnClickedTaskId(clickedTaskName, names, ids);
                System.out.println("Task ID: " + clickedTaskId);
                System.out.println(clickedTaskName);
                System.out.println("Task ratio for above task: " + clickedTaskRatio);
                //get the weight of the task clicked
                //return bands into list -- changes made in dbhelper to use view
                ResultSet rs = DatabaseHelperSP.checkTaskBand(HomePage.conn, clickedTaskId);
                defaultBandTblModel.setRowCount(0);
                addBandsToTbl(rs);
                displayBandFrame(bandFrame, pieFrame);                                        
            }
            public void chartMouseMoved(ChartMouseEvent e) {}
        });
    }
    
    //we need to fill the pie dataset with the task names and their ratios
    private void fillPieDataSetDefaults(List names, List ratios, DefaultPieDataset pieDatasetDefaults){
        for(int i = 0; i<names.size(); i++){
                String tsk = (String)names.get(i);
                System.out.println("task in fillPieDataset: " + tsk);
                float rtio = (Float)ratios.get(i);
                System.out.println("ratio in fillPieDataset: " + rtio);
                pieDatasetDefaults.setValue(tsk,  rtio);
            }
    }
    
     private String taskClicked(String entity){
        String taskName="";
        int startIndex = entity.indexOf("(");
        int endIndex = entity.indexOf(")");
        ArrayList taskNameL = new ArrayList<String>();
        for(int i=startIndex + 1; i<endIndex; i++){
            taskNameL.add(entity.charAt(i));
        }
        for(int j = 0; j<taskNameL.size(); j++){
            taskName = taskName.concat(taskNameL.get(j).toString());
            System.out.println("concetenated task name: " + taskName);
        }
        System.out.println(taskName);
        return taskName;
    }
    
    //check the name and ratio lists and return appropriate result
    private float returnClickedTaskRatio(String name, List namesList, List ratioList){
        for(int i=0; i<namesList.size(); i++){
            if (name.equals(namesList.get(i).toString())){
                clickedTaskRatio = Float.parseFloat(ratioList.get(i).toString());
            }
        }        
        return clickedTaskRatio;
    }
    
    //check the name and id of the task selected
    private int returnClickedTaskId(String name, List namesList, List taskIds){
        Integer taskId = 0;
        for(int i=0; i<namesList.size(); i++){
            if (name.equals(namesList.get(i).toString())){
                taskId = Integer.parseInt(taskIds.get(i).toString());
                System.out.println("Found ID in list = " + taskId);
            }
        }        
        return taskId;
    }
    
    private String returnTaskName(Integer id, List namesList, List taskIds){
        String taskName = null;
        for(int i=0; i<namesList.size(); i++){
            if(id.equals(taskIds.get(i))){
                taskName = namesList.get(i).toString();
                System.out.println("Found task name in list = " + taskName);
            }
        }        
        return taskName;
    }
    
    private void addBandsToTbl(ResultSet rs){
        defaultBandTblModel = (DefaultTableModel)taskBandTable.getModel();
        //BUG! ************** BANDS ARE NOT ADDING TO THE TABLE CORRECTLY. 
        //SEEMS LIKE BANDS ARE THE SAME FOR EVERY TASK
        // WE THINK IT DEPENDS ON THE BAND U CLICK FIRST, AS IF ALL FOLLOWING TASKS THEN SHOW *THOSE* BANDS INSTEAD OF THEIR OWN ACTUAL BANDS
        defaultBandTblModel.setRowCount(0);
        try{
            while(rs.next()){                
                String bandName = rs.getString("TaskBandName");
                System.out.println("band is: " + bandName);
                Integer bandId = rs.getInt("TaskBand_ID");
                String strBandId = bandId.toString();
                String strClickedTskId = clickedTaskId.toString();
                String[] newRow = {bandName, strBandId, strClickedTskId};
                defaultBandTblModel.addRow(newRow);
            }
        }catch(SQLException ex){
        }
    }
    
    private void displayBandFrame(JFrame bandFrame, JFrame pie){
        bandFrame.setSize(300, 300);
        bandFrame.setLayout(new BorderLayout());
        bandFrame.setTitle("Bands for " + clickedTaskName);
        bandFrame.add(bandJP, BorderLayout.CENTER);
        bandJP.setVisible(true);
        bandFrame.setLocationRelativeTo(pie);
        bandFrame.setVisible(true);
        clearBandTableAndExitWhenAsked();
    }
    
    //add a window listener for when the frame is xd off
    //Note: may need to fix as confirmation message is appearing more times than it should
    private void clearBandTableAndExitWhenAsked(){
        //BUG************************ CONFIRMMESSAGE DIALOGUE APPEARING AS MANY TIMES AS TASKS BEING CLICKED
//        bandFrame.addWindowListener(new java.awt.event.WindowAdapter() {
//            @Override
//            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
//            if (JOptionPane.showConfirmDialog(bandFrame,"Are you sure you want to close this window?", "Close Window?", JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION){
//                defaultBandTblModel.setRowCount(0);
//                bandFrame.dispose();
//                }
//            }
//        });    
    }
    
    private void updateRowInJTable(JTable jTable, Integer taskId, String bandIdStr){
        DefaultTableModel bandIdTblModel = (DefaultTableModel)jTable.getModel();
        boolean exists = false;
        for(int i=0; i<bandIdTblModel.getRowCount();i++){
            Integer tableTaskId = Integer.valueOf((String)bandIdTblModel.getValueAt(i, 1));
            if(taskId.equals(tableTaskId)){         //******************
                System.out.println("taskId exists: " + taskId);
                exists = true;
                bandIdTblModel.removeRow(i);
                System.out.println("Removed task at row!!");
                String data [] = {bandIdStr, Integer.toString(taskId)};
                bandIdTblModel.addRow(data);           
            }
        }
        if(!exists){
            System.out.println("Task has not been logged: " + taskId);
            String data [] = {bandIdStr, Integer.toString(taskId)};
            bandIdTblModel.addRow(data);
        }
    }
    
    private void updateSubModelDefaultDBTable(Integer deptWorkModelId, String defaultSubModName){
        //call dbhelper fnction to insert data
        Timestamp t = new Timestamp(System.currentTimeMillis());
        DatabaseHelperSP.insertSubDefaultData(deptWorkModelId, defaultSubModName, t);
    }
    
    //get the subModDefault ID with workMod ID
    private int subModDefaultId(Integer subModId){
        return DatabaseHelperSP.returnDefaultSubModID(subModId);
    }
    
    private void addBandIdsToDefaultDBTable(Integer id, JTable jTable){
        //go through the hidden table at col 0 and for each band update 
        DefaultTableModel bandIdTblModel = (DefaultTableModel)jTable.getModel();
        for(int i=0; i<bandIdTblModel.getRowCount();i++){
            Integer bandId = Integer.valueOf((String)bandIdTblModel.getValueAt(i, 0));
            updateDefaultBandTable(id, bandId);
        }
    }
    
    //add subModDefault ID, band ID into subModDefBand
    private void updateDefaultBandTable(Integer subDefaultId, Integer bandId){
        Timestamp t = new Timestamp(System.currentTimeMillis());
        DatabaseHelperSP.insertDefaultBandData(subDefaultId, bandId, t);
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccountHomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccountHomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccountHomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccountHomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AccountHomePage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel accountHomePanel;
    private javax.swing.JButton addBandButton;
    private javax.swing.JButton addTaskButton;
    private javax.swing.JButton analyseButton;
    private javax.swing.JPanel analysisPanel;
    private javax.swing.JLabel backFromAnalysis;
    private javax.swing.JLabel backFromPatient;
    private javax.swing.JLabel backFromStaff;
    private javax.swing.JPanel bandCreationPanel;
    private javax.swing.JLabel bandDeleteButton;
    private javax.swing.JLabel bandDescLabel;
    private javax.swing.JTextArea bandDescTF;
    private javax.swing.JTable bandIdDefaultTable;
    private javax.swing.JPanel bandJP;
    private javax.swing.JLabel bandNameLabel;
    private javax.swing.JTextField bandNameTF;
    private javax.swing.JTable bandTable;
    private javax.swing.JLabel bandWeightLabel;
    private javax.swing.JTextField bandWeightTF;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton configButton;
    private javax.swing.JRadioButton configDeptWardSelection;
    private javax.swing.JPanel configDisplayPanel;
    private javax.swing.JComboBox<String> configWardComboBox;
    private javax.swing.JPanel configurationPanel;
    private javax.swing.JLabel deleteTaskButton;
    private javax.swing.JComboBox<String> deptComboBox;
    private javax.swing.JPanel deptSelectionJP;
    private javax.swing.JLabel deptTF;
    private javax.swing.JPanel deptWardAssignmentPanel;
    private javax.swing.JPanel deptWorkModJP;
    private javax.swing.JTable deptWorkModelTable;
    private javax.swing.JButton editAPasswordButton;
    private javax.swing.JPanel emptyPanel;
    private javax.swing.JPanel emptyWardComboJP;
    private javax.swing.JButton enterPieChartNameButton;
    private javax.swing.JButton enterSubModNameButton;
    private javax.swing.JPanel fullWardComboJP;
    private javax.swing.JPanel infoDisplayJP;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JButton logOutButton;
    private javax.swing.JLabel myAccountLabel;
    private javax.swing.JButton patientButton;
    private javax.swing.JPanel patientPanel;
    private javax.swing.JTextField pieChartNameTF;
    private javax.swing.JButton saveChangesButton;
    private javax.swing.JButton saveDefaultChangesJB;
    private javax.swing.JButton saveTaskChangesButton;
    private javax.swing.JLabel selectPieLabel;
    private javax.swing.JPanel selectPiePanel;
    private javax.swing.JButton staffButton;
    private javax.swing.JLabel staffListLabel;
    private javax.swing.JPanel staffPinPanel;
    private javax.swing.JTable staffTable;
    private javax.swing.JTextArea subModDescTF;
    private javax.swing.JTextField subModNameTF;
    private javax.swing.JComboBox<String> subModelComboBox;
    private javax.swing.JPanel subModelConfigPanel;
    private javax.swing.JLabel subModelDescLabel;
    private javax.swing.JLabel subModelNameLabel;
    private javax.swing.JRadioButton subModelPieSelection;
    private javax.swing.JLabel subModelTF;
    private javax.swing.JTable subModelTable;
    private javax.swing.JTable subModeljTable;
    private javax.swing.JTable subPrimTaskDisplayTable;
    private javax.swing.JButton subSaveChanges;
    private javax.swing.JTable taskBandTable;
    private javax.swing.JTextArea taskDescriptionTF;
    private javax.swing.JLabel taskNameBand;
    private javax.swing.JLabel taskNameIDLabel;
    private javax.swing.JLabel taskNameLabel;
    private javax.swing.JTextField taskNameTF;
    private javax.swing.JLabel taskRatioLabel;
    private javax.swing.JTable taskTable;
    private javax.swing.JLabel taskTblWorkModDescLbl;
    private javax.swing.JLabel taskTblWorkModDescLblValue;
    private javax.swing.JLabel taskTblWorkModLblValue;
    private javax.swing.JLabel taskTblWorkModNameLbl;
    private javax.swing.JTextField taskWeightTF;
    private javax.swing.JPanel topStripPanel;
    private javax.swing.JButton viewPieChartButton;
    private javax.swing.JButton viewSubModel;
    private javax.swing.JPanel wardComboJP;
    private javax.swing.JPanel wardSubModJP;
    private javax.swing.JLabel wardTF;
    private javax.swing.JLabel workModNameLabel;
    private javax.swing.JPanel workModelConfigPanel;
    private javax.swing.JLabel workModelDescLabel;
    private javax.swing.JTextArea workModelDescTF;
    private javax.swing.JRadioButton workModelPieSelection;
    private javax.swing.JLabel workModelTF;
    private javax.swing.JPanel workSubModDisplayJP;
    // End of variables declaration//GEN-END:variables
}
